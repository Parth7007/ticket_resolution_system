# AI-Powered IT Helpdesk Ticketing System

## 📝 Project Overview

This is an intelligent, full-stack IT Helpdesk Ticketing System designed for companies and teams to efficiently manage IT support tickets. The system leverages advanced AI/ML models to streamline ticket classification, prioritization, and resolution, providing a seamless experience for both users and IT administrators.

### AI/ML Features:

- **Text Classification**: Utilizes TF-IDF and XGBoost for automatic ticket type and priority classification based on text input.
- **OCR/Image Classification**: Employs Convolutional Neural Networks (CNN) with MobileNetV2 to process screenshot-based tickets and extract relevant information via OCR.
- **Generative AI**: Integrates a Large Language Model (LLM) powered by Groq or Ollama to generate automated ticket resolutions.

## 🚀 Features

### User Features

- **Ticket Submission**: Users can submit tickets via text or image uploads.
- **Solution Viewing**: Users can view resolutions provided by admins for their tickets.

### Admin Features

- **Ticket Management**: Admins can view all tickets submitted across the system.
- **AI-Powered Resolutions**: Admins can add resolutions generated by the GenAI model.
- **Resolution Download**: Admins can download resolutions as `.txt` files.

### System Features

- **Role-Based Dashboards**: Separate dashboards for users and admins.
- **Intelligent ML/AI Pipeline**: Combines text classification, OCR, and GenAI for efficient ticket processing.
- **Dual Database Architecture**:
  - **PostgreSQL**: Handles text-based tickets and user authentication.
  - **MongoDB Atlas**: Stores image-based tickets and associated metadata.
- **Responsive Frontend**: Built with React and Tailwind CSS for a modern, user-friendly interface.

## 🔐 Authentication

- **JWT-Based Authentication**: Secure login and signup for users and admins.
- **AuthContext**: Manages authentication state in the frontend.
- **Route Protection**: Ensures dashboards are accessible only to authorized users based on their roles.

## 🛠️ Technologies Used

### Frontend

- **React**: For building dynamic, component-based UI.
- **Tailwind CSS**: For responsive and modern styling.
- **Vite**: For fast development and building.
- **React Router DOM**: For client-side routing.
- **Axios**: For making API requests to the backend.

### Backend

- **FastAPI**: High-performance Python framework for building APIs.
- **SQLAlchemy**: For PostgreSQL database operations.
- **Pydantic**: For data validation and serialization.
- **python-multipart**: For handling file uploads (e.g., images).
- **PyMongo**: For MongoDB Atlas integration.

### ML/DL Models

- **Text Classification**: TF-IDF + XGBoost with LabelEncoder for ticket type and priority.
- **Image Processing**: MobileNetV2 (CNN) for screenshot-based ticket analysis.
- **Generative AI**: LLM (Groq or Ollama) for generating ticket resolutions.

### Databases

- **PostgreSQL**: Stores text-based tickets and authentication data.
- **MongoDB Atlas**: Stores image-based tickets and metadata.

## 💻 Installation Steps

### 🔧 Backend Setup

```
git clone https://github.com/your-repo/ticket-resolution-system.git
cd backend
python -m venv venv
source venv/bin/activate  # or venv\Scripts\activate on Windows
pip install -r requirements.txt
uvicorn main:app --reload
```

1. Create a `.env` file in the `backend` directory with the following content:

```
POSTGRES_URL=postgresql://user:password@localhost:5432/ticket_db
MONGODB_URL=mongodb+srv://user:password@cluster.mongodb.net/ticket_db
JWT_SECRET=your_jwt_secret_key
```

2. Ensure ML models (TF-IDF, XGBoost, CNN) are saved in the `ml_model/` directory.

### 🧪 ML Model Training (Optional)

If retraining is needed:

1. Train TF-IDF + XGBoost on labeled text ticket data.
2. Train MobileNetV2 (CNN) on image quality data for OCR tickets.
3. Save models using `joblib` or `pickle` to the `ml_model/` directory.

### 🌐 Frontend Setup

```
cd ../frontend
npm install
npm run dev
```

1. Create a `.env` file in the `frontend` directory with the following content:

```
VITE_API_BASE_URL=http://localhost:8000/api
```

## 🚀 Running the Full Stack

1. Start the backend:

```
cd backend
uvicorn main:app --reload
```

2. Start the frontend:

```
cd frontend
npm run dev
```

3. Open the application in your browser at: `http://localhost:5173`.

## 🧪 Testing & Usage

1. **User Workflow**:
   - Sign up as a user.
   - Submit a ticket (text or image-based).
   - View the resolution once provided by an admin.
2. **Admin Workflow**:
   - Sign up as an admin.
   - View all tickets in the admin dashboard.
   - Add AI-generated resolutions to tickets.
   - Download resolutions as `.txt` files.
3. **Testing the AI Pipeline**:
   - Submit an image-based ticket to test the OCR + CNN + GenAI pipeline.

## 📁 Project Structure

### Backend

```
backend/
├── db/
│   ├── models.py         # Database models
│   ├── mongo.py         # MongoDB connection setup
│   ├── postgres.py      # PostgreSQL connection setup
├── models/
│   ├── genai_model.py   # Generative AI model integration
│   ├── ml_model.py      # ML model (TF-IDF + XGBoost, CNN)
│   ├── user.py          # User model for authentication
├── routes/
│   ├── all_tickets_routes.py  # Routes for viewing all tickets
│   ├── auth_routes.py         # Authentication routes
│   ├── ocr_routes.py          # OCR and image processing routes
│   ├── ticket_routes.py       # Ticket submission and management routes
├── schemas/
│   ├── ticket_schema.py  # Pydantic schemas for tickets
│   ├── user.py           # Pydantic schemas for users
├── services/
│   ├── file_utils.py     # File handling utilities
│   ├── ticket_processor.py  # Ticket processing logic
├── utils/
│   ├── ocr.py            # OCR processing utilities
│   ├── preprocess.py     # Data preprocessing utilities
├── .env                  # Environment variables
└── app.py                # Main FastAPI application
```

### Frontend

```
frontend/
├── src/
│   ├── assets/
│   │   ├── react.svg     # Static assets
│   ├── components/
│   │   ├── dashboard/
│   │   │   ├── TicketCard.jsx    # Ticket display component
│   │   │   ├── TicketList.jsx    # List of tickets
│   │   ├── forms/
│   │   │   ├── ImageTicketForm.jsx  # Form for image-based tickets
│   │   │   ├── TextTicketForm.jsx   # Form for text-based tickets
│   │   ├── shared/
│   │   │   ├── Loader.jsx           # Loading component
│   │   │   ├── Navbar.jsx           # Navigation bar
│   │   │   ├── ProfileDropdown.jsx  # User profile dropdown
│   ├── context/
│   │   ├── AuthContext.jsx          # Authentication context
│   ├── pages/
│   │   ├── AdminDashboard.jsx        # Admin dashboard page
│   │   ├── Login.jsx                 # Login page
│   │   ├── NotFound.jsx              # 404 page
│   │   ├── Signup.jsx                # Signup page
│   │   ├── UserDashboard.jsx         # User dashboard page
│   ├── routes/
│   │   ├── AppRoutes.jsx             # Application routes
│   │   ├── ProtectedRoute.jsx        # Protected route component
│   ├── services/
│   │   ├── api.js                   # API request utilities
│   ├── App.jsx                       # Main App component
│   ├── index.css                     # Global CSS
│   ├── main.jsx                      # Entry point
├── public/
│   ├── vite.svg                     # Vite logo
├── .gitignore                       # Git ignore file
├── package.json                     # Frontend dependencies
├── tailwind.config.js               # Tailwind CSS configuration
├── vite.config.js                   # Vite configuration
```

## 🙋‍♂️ Contributors

- **Name**: Parth Kadoo
- **Role**: Developer
